name: Build releases

on:
  workflow_dispatch:
    inputs:
      INPUT_TARGET:
        description: "Target to build x86-64"
        required: false
        default: "x86_64/x86/64/linux-amd64/amd64"
  schedule:
    - cron: 0 0 * * *
  watch:
    types: started

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    name: Build kmod
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Set time zone
      run: sudo timedatectl set-timezone 'Asia/Shanghai'

    - name: Show system
      run: |
        lscpu
        free -h
        uname -a
        df -h

    - name: Free disk space
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E systemctl stop docker
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge dotnet* firefox clang* gcc-10* ghc* google* hhvm llvm* mono* mongo* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo -E rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        rm -rf ~/{.cargo,.dotnet,.rustup}
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E rm -rf /etc/apt/sources.list.d
        sudo -E apt-get update -y
        sudo -E apt-get install -y build-essential rsync asciidoc binutils bzip2 gawk gettext git libfuse-dev libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core p7zip p7zip-full msmtp texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons android-sdk-libsparse-utils android-sdk-ext4-utils proxychains-ng
        echo "deb http://archive.ubuntu.com/ubuntu/ bionic-security main" | sudo tee -a /etc/apt/sources.list
        sudo -E apt-get update
        sudo -E apt-cache policy libssl1.0-dev
        sudo -E apt-get install -y libssl1.0-dev kmod
        sudo -E apt-get clean -y
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h

    - name: Compile Openwrt
      id: compileopenwrt
      run: |
        bash <(curl -sS https://init2.cooluc.com/build.sh) rc x86 kmod

    - name: Upload
      env: 
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        kmod_hash: $(cat kernel.txt | grep HASH | awk -F- '{print $2}' | awk '{print $1}' | md5sum | awk '{print $1}')
        kmodpkg_name: $(echo $(cat kernel.txt | grep HASH | awk -F- '{print $2}' | awk '{print $1}')-1-$(echo $kmod_hash))
      run: |
        echo "kmod_hash: $kmod_hash"
        echo "kmodpkg_name: $kmodpkg_name"
        cd $kmodpkg_name/
        git config --global user.email “hululuxi@yahoo.com”
        git config --global user.name “hululuxi”
        git init
        git add .
        git commit -am "update $(date +%Y-%m-%d" "%H:%M:%S)"
        git push --quiet "https://${{ secrets.ACCESS_TOKEN }}@github.com/hululuxi/openwrt-kmods" master
